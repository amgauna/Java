<HTML>
<BODY>

<A NAME="methods"><H1>Methods and Functions</H1></A>

<P>The following methods and functions are available in JavaScript:
<TABLE WIDTH=70%>
<TR VALIGN=TOP>
<TD>
<LI><A HREF=#abs_method>abs</A>
<LI><A HREF=#acos_method>acos</A>
<LI><A HREF=#alert_method>alert</A>
<LI><A HREF=#anchor_method>anchor</A>
<LI><A HREF=#asin_method>asin</A>
<LI><A HREF=#atan_method>atan</A>
<LI><A HREF=#back_method>back</A>
<LI><A HREF=#big_method>big</A>
<LI><A HREF=#blink_method>blink</A>
<LI><A HREF=#blur_method>blur</A>
<LI><A HREF=#bold_method>bold</A>
<LI><A HREF=#ceil_method>ceil</A>
<LI><A HREF=#charAt_method>charAt</A>
<LI><A HREF=#clear_method>clear</A>
<LI><A HREF=#clearTimeout_method>clearTimeout</A>
<LI><A HREF=#click_method>click</A>
<LI><A HREF=#close_document_method>close&nbsp(document)</A>
<LI><A HREF=#close_window_method>close&nbsp(window)</A>
<LI><A HREF=#confirm_method>confirm</A>
<LI><A HREF=#cos_method>cos</A>
<LI><A HREF=#escape_method>escape</A>
<LI><A HREF=#eval_method>eval</A>
<LI><A HREF=#exp_method>exp</A>
<LI><A HREF=#fixed_method>fixed</A>
<LI><A HREF=#floor_method>floor</A>
<LI><A HREF=#focus_method>focus</A>
<LI><A HREF=#fontcolor_method>fontcolor</A>
<LI><A HREF=#fontsize_method>fontsize</A>
</TD>
<TD>
<LI><A HREF=#forward_method>forward</A>
<LI><A HREF=#getDate_method>getDate</A>
<LI><A HREF=#getDay_method>getDay</A>
<LI><A HREF=#getHours_method>getHours</A>
<LI><A HREF=#getMinutes_method>getMinutes</A>
<LI><A HREF=#getMonth_method>getMonth</A>
<LI><A HREF=#getSeconds_method>getSeconds</A>
<LI><A HREF=#getTime_method>getTime</A>
<LI><A HREF=#getTimezoneOffset_method>getTimezoneOffset</A>
<LI><A HREF=#getYear_method>getYear</A>
<LI><A HREF=#go_method>go</A>
<LI><A HREF=#indexOf_method>indexOf</A>
<LI><A HREF=#isNaN_method>isNaN</A>
<LI><A HREF=#italics_method>italics</A>
<LI><A HREF=#lastIndexOf_method>lastIndexOf</A>
<LI><A HREF=#link_method>link</A>
<LI><A HREF=#log_method>log</A>
<LI><A HREF=#max_method>max</A>
<LI><A HREF=#min_method>min</A>
<LI><A HREF=#open_document_method>open&nbsp(document)</A>
<LI><A HREF=#open_window_method>open&nbsp(window)</A>
<LI><A HREF=#parse_method>parse</A>
<LI><A HREF=#parseFloat_method>parseFloat</A>
<LI><A HREF=#parseInt_method>parseInt</A>
<LI><A HREF=#pow_method>pow</A>
<LI><A HREF=#prompt_method>prompt</A>
<LI><A HREF=#random_method>random</A>
</TD>
<TD>
<LI><A HREF=#round_method>round</A>
<LI><A HREF=#select_method>select</A>
<LI><A HREF=#setDate_method>setDate</A>
<LI><A HREF=#setHours_method>setHours</A>
<LI><A HREF=#setMinutes_method>setMinutes</A>
<LI><A HREF=#setMonth_method>setMonth</A>
<LI><A HREF=#setSeconds_method>setSeconds</A>
<LI><A HREF=#setTimeout_method>setTimeout</A>
<LI><A HREF=#setTime_method>setTime</A>
<LI><A HREF=#setYear_method>setYear</A>
<LI><A HREF=#sin_method>sin</A>
<LI><A HREF=#small_method>small</A>
<LI><A HREF=#sqrt_method>sqrt</A>
<LI><A HREF=#strike_method>strike</A>
<LI><A HREF=#sub_method>sub</A>
<LI><A HREF=#submit_method>submit</A>
<LI><A HREF=#substring_method>substring</A>
<LI><A HREF=#sup_method>sup</A>
<LI><A HREF=#tan_method>tan</A>
<LI><A HREF=#toGMTString_method>toGMTString</A>
<LI><A HREF=#toLocaleString_method>toLocaleString</A>
<LI><A HREF=#toLowerCase_method>toLowerCase</A>
<LI><A HREF=#toUpperCase_method>toUpperCase</A>
<LI><A HREF=#unescape_method>unescape</A>
<LI><A HREF=#UTC_method>UTC</A>
<LI><A HREF=#write_method>write</A>
<LI><A HREF=#writeln_method>writeln</A>
</TD>
</TR>
</TABLE>

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="abs_method"><H2>abs method</H2></A>
<P>Returns the absolute value of a number.

<H3>Syntax</H3>
<PRE>Math.abs(<I>number</I>)</PRE>
<P><I>number</I> is any numeric expression or a property of an existing object.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<P>In the following example, the user enters a number in the first text box and presses the Calculate button to display the absolute value of the number.
<PRE>
&ltFORM&gt
&ltP&gtEnter a number:
&ltINPUT TYPE="text" NAME="absEntry"&gt

&ltP&gtThe absolute value is:
&ltINPUT TYPE="text" NAME="result"&gt

&ltP&gt
&ltINPUT TYPE="button" VALUE="Calculate"
   onClick="form.result.value = Math.abs(form.absEntry.value)"&gt

&lt/FORM&gt
</PRE>

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="acos_method"><H2>acos method</H2></A>
<P>Returns the arc cosine (in radians) of a number.

<H3>Syntax</H3>
<PRE>Math.acos(<I>number</I>)</PRE>
<P><I>number</I> is a numeric expression between -1 and 1, or a property of an existing object.

<H3>Description</H3>
<P>The acos method returns a numeric value between 0 and pi radians. If the value of <I>number</I> is outside the suggested range, the return value is always 0.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
// Displays the value 0
document.write("The arc cosine of 1 is " + Math.acos(1))

// Displays the value 3.141592653589793
document.write("&ltP&gtThe arc cosine of -1 is " + Math.acos(-1))

// Displays the value 0
document.write("&ltP&gtThe arc cosine of 2 is " + Math.acos(2))
</PRE>

<H3>See also</H3>
<LI><A HREF=#asin_method>asin</A>, <A HREF=#atan_method>atan</A>, <A HREF=#cos_method>cos</A>, <A HREF=#sin_method>sin</A>, <A HREF=#tan_method>tan</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="alert_method"><H2>alert method</H2></A>
<P>
Displays an Alert dialog box with a message and an OK button.

<H3>Syntax</H3>
<PRE>alert("<I>message</I>")</PRE>
<P><I>message</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>Use the alert method to display a message that does not require a user decision. The <I>message</I> argument specifies a message that the dialog box contains.

<P>Although alert is a method of the window object, you do not need to specify a <I>windowReference</I> when you call it. For example, <TT><I>windowReference</I>.alert()</TT> is unnecessary.

<H3>Method of</H3>
<P><A HREF=objects.htm#window_object>window</A>

<H3>Examples</H3>
<P>In the following example, the <I>testValue()</I> function checks the name entered by a user in the text object of a form to make sure that it is no more than eight characters in length. This example uses the alert method to prompt the user to enter a valid value.
<PRE>
function testValue(textElement) {
   if (textElement.length > 8) {
      alert("Please enter a name that is 8 characters or less")
   }
}</PRE>
You can call the <I>testValue()</I> function in the onBlur event handler of a form's text object, as shown in the following example:
<PRE>Name: &ltINPUT TYPE="text" NAME="userName"
   onBlur="testValue(userName.value)"&gt</PRE>

<H3>See also</H3>
<LI><A HREF=#confirm_method>confirm</A>, <A HREF=#prompt_method>prompt</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="anchor_method"><H2>anchor method</H2></A>
<P>
Creates an HTML anchor that is used as a hypertext target.

<H3>Syntax</H3>
<PRE><I>text</I>.anchor(<I>nameAttribute</I>)</PRE>
<P><I>text</I> is any string or a property of an existing object.
<BR><I>nameAttribute</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>Use the anchor method with the write or writeln methods to programatically create and display an anchor in a document. Create the anchor with the anchor method, then call write or writeln to display the anchor in a document.

<P>In the syntax, the <I>text</I> string represents the literal text that you want the user to see. The <I>nameAttribute</I> string represents the NAME attribute of the &LTA&GT tag.

<P>Anchors created with the anchor method become elements in the anchors array. See the <A HREF=objects.htm#anchor_object>anchor</A> object for information about the anchors array.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
<P>The following example opens the <I>msgWindow</I> window and creates an anchor for the Table of Contents:
<XMP>
   var myString="Table of Contents"

   msgWindow=window.open("","displayWindow")
   msgWindow.document.writeln(myString.anchor("contents_anchor"))
   msgWindow.document.close()
</XMP>
<P>The previous example produces the same output as the following HTML:
<XMP>
<A NAME="contents_anchor">Table of Contents</A>
</XMP>

<H3>See also</H3>
<LI><A HREF=#link_method>link</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="asin_method"><H2>asin method</H2></A>
<P>
Returns the arc sine (in radians) of a number.

<H3>Syntax</H3>
<PRE>Math.asin(<I>number</I>)</PRE>
<P><I>number</I> is a numeric expression between -1 and 1, or a property of an existing object.

<H3>Description</H3>
<P>The asin method returns a numeric value between -pi/2 and pi/2 radians. If the value of <I>number</I> is outside the suggested range, the return value is always 0.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
// Displays the value 1.570796326794897 (pi/2)
document.write("The arc sine of 1 is " + Math.asin(1))

// Displays the value -1.570796326794897 (-pi/2)
document.write("&ltP&gtThe arc sine of -1 is " + Math.asin(-1))

// Displays the value 0 because the argument is out of range
document.write("&ltP&gtThe arc sine of 2 is " + Math.asin(2))
</PRE>

<H3>See also</H3>
<LI><A HREF=#acos_method>acos</A>, <A HREF=#atan_method>atan</A>, <A HREF=#cos_method>cos</A>, <A HREF=#sin_method>sin</A>, <A HREF=#tan_method>tan</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="atan_method"><H2>atan method</H2></A>
<P>
Returns the arc tangent (in radians) of a number.

<H3>Syntax</H3>
<PRE>Math.atan(<I>number</I>)</PRE>
<P><I>number</I> is either a numeric expression or a property of an existing object, representing the tangent of an angle.

<H3>Description</H3>
<P>The atan method returns a numeric value between -pi/2 and pi/2 radians.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
// Displays the value 0.7853981633974483
document.write("The arc tangent of 1 is " + Math.atan(1))

// Displays the value -0.7853981633974483
document.write("&ltP&gtThe arc tangent of -1 is " + Math.atan(-1))

// Displays the value 0.4636476090008061
document.write("&ltP&gtThe arc tangent of .5 is " + Math.atan(.5))
</PRE>

<H3>See also</H3>
<LI><A HREF=#acos_method>acos</A>, <A HREF=#asin_method>asin</A>, <A HREF=#cos_method>cos</A>, <A HREF=#sin_method>sin</A>, <A HREF=#tan_method>tan</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="back_method"><H2>back method</H2></A>
<P>
Loads the previous URL in the history list.

<H3>Syntax</H3>
<PRE>history.back()</PRE>

<H3>Description</H3>
<P>This method performs the same action as a user choosing the Back button in the Navigator. The back method is the same as <TT>history.go(-1)</TT>.

<H3>Method of</H3>
<P><A HREF=objects.htm#history_object>history</A>

<H3>Examples</H3>
The following custom buttons perform the same operations as the Navigator Back and Forward buttons:
<PRE>
&ltP&gt&ltINPUT TYPE="button" VALUE="< Back"
   onClick="history.back()"&gt
&ltP&gt&ltINPUT TYPE="button" VALUE="> Forward"
   onClick="history.forward()"&gt
</PRE>

<H3>See also</H3>
<LI><A HREF=#forward_method>forward</A>, <A HREF=#go_method>go</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="big_method"><H2>big method</H2></A>
<P>
Causes a string to be displayed in a big font as if it were in a &LTBIG&GT tag.

<H3>Syntax</H3>
<PRE><I>stringName</I>.big()</PRE>
<P><I>stringName</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>Use the big method with the write or writeln methods to format and display a string in a document.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses string methods to change the size of a string:
<PRE>
var worldString="Hello, world"

document.write(worldString.small())
document.write("&ltP&gt" + worldString.big())
document.write("&ltP&gt" + worldString.fontsize(7))
</PRE>

<P>The previous example produces the same output as the following HTML:
<XMP>
<SMALL>Hello, world</SMALL>
<P><BIG>Hello, world</BIG>
<P><FONTSIZE=7>Hello, world</FONTSIZE>
</XMP>

<H3>See also</H3>
<LI><A HREF=#fontsize_method>fontsize</A>, <A HREF=#small_method>small</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="blink_method"><H2>blink method</H2></A>
<P>
Causes a string to blink as if it were in a &ltBLINK&gt tag.

<H3>Syntax</H3>
<PRE><I>stringName</I>.blink()</PRE>
<P><I>stringName</I> is any string or a property of an existing object.


<H3>Description</H3>
<P>Use the blink method with the write or writeln methods to format and display a string in a document.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses string methods to change the formatting of a string:
<PRE>
var worldString="Hello, world"

document.write(worldString.blink())
document.write("&ltP&gt" + worldString.bold())
document.write("&ltP&gt" + worldString.italics())
document.write("&ltP&gt" + worldString.strike())
</PRE>

<P>The previous example produces the same output as the following HTML:
<XMP>
<BLINK>Hello, world</BLINK>
<P><B>Hello, world</B>
<P><I>Hello, world</I>
<P><STRIKE>Hello, world</STRIKE>
</XMP>

<H3>See also</H3>
<LI><A HREF=#bold_method>bold</A>, <A HREF=#italics_method>italics</A>, <A HREF=#strike_method>strike</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="blur_method"><H2>blur method</H2></A>
<P>
Removes focus from the specified object.

<H3>Syntax</H3>
<PRE>
1. <I>passwordName</I>.blur()
2. <I>selectName</I>.blur()
3. <I>textName</I>.blur()
4. <I>textareaName</I>.blur()
</PRE>
<P><I>passwordName</I> is either the value of the NAME attribute of a password object or an element in the <I>elements</I> array.
<BR><I>selectName</I> is either the value of the NAME attribute of a select object or an element in the <I>elements</I> array.
<BR><I>textName</I> is either the value of the NAME attribute of a text object or an element in the <I>elements</I> array.
<BR><I>textareaName</I> is either the value of the NAME attribute of a textarea object or an element in the <I>elements</I> array.

<H3>Description</H3>
<P>Use the blur method to remove focus from a specific form element.

<H3>Method of</H3>
<P><A HREF=objects.htm#password_object>password</A>, <A HREF=objects.htm#select_object>select</A>, <A HREF=objects.htm#text_object>text</A>, <A HREF=objects.htm#textarea_object>textarea</A>

<H3>Examples</H3>
<P>The following example removes focus from the password element <I>userPass</I>:
<PRE>
userPass.blur()
</PRE>
This example assumes that the password is defined as:
<PRE>&ltINPUT TYPE="password" NAME="userPass"&gt</PRE>

<H3>See also</H3>
<LI><A HREF=#focus_method>focus</A>, <A HREF=#select_method>select</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="bold_method"><H2>bold method</H2></A>
<P>
Causes a string to be displayed as bold as if it were in a &LTB&GT tag.

<H3>Syntax</H3>
<PRE><I>stringName</I>.bold()</PRE>
<P><I>stringName</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>Use the bold method with the write or writeln methods to format and display a string in a document.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses string methods to change the formatting of a string:
<PRE>
var worldString="Hello, world"

document.write(worldString.blink())
document.write("&ltP&gt" + worldString.bold())
document.write("&ltP&gt" + worldString.italics())
document.write("&ltP&gt" + worldString.strike())
</PRE>

<P>The previous example produces the same output as the following HTML:
<PRE>
<TT>&ltBLINK&gtHello, world&lt/BLINK&gt</TT>
<TT>&ltP&gt&ltB&gtHello, world&lt/B&gt</TT>
<TT>&ltP&gt&ltI&gtHello, world&lt/I&gt</TT>
<TT>&ltP&gt&ltSTRIKE&gtHello, world&lt/STRIKE&gt</TT>
</PRE>

<H3>See also</H3>
<LI><A HREF=#blink_method>blink</A>, <A HREF=#italics_method>italics</A>, <A HREF=#strike_method>strike</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="ceil_method"><H2>ceil method</H2></A>
<P>
Returns the least integer greater than or equal to a number.

<H3>Syntax</H3>
<PRE>Math.ceil(<I>number</I>)</PRE>
<P><I>number</I> is any numeric expression or a property of an existing object.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays the value 46
document.write("The ceil of 45.95 is " + Math.ceil(45.95))

//Displays the value -45
document.write("&ltP&gtThe ceil of -45.95 is " + Math.ceil(-45.95))
</PRE>

<H3>See also</H3>
<LI><A HREF=#floor_method>floor</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="charAt_method"><H2>charAt method</H2></A>
<P>
Returns the character at the specified <I>index</I>.

<H3>Syntax</H3>
<PRE><I>stringName</I>.charAt(<I>index</I>)</PRE>
<P><I>stringName</I> is any string or a property of an existing object.
<BR><I>index</I> is any integer from 0 to <I>stringName</I>.length - 1, or a property of an existing object.

<H3>Description</H3>
<P>Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character is <I>stringName</I>.length - 1. If the <I>index</I> you supply is out of range, JavaScript returns an empty string.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example displays characters at different locations in the string "Brave new world".
<PRE>
var anyString="Brave new world"

document.write("The character at index 0 is " + anyString.charAt(0))
document.write("The character at index 1 is " + anyString.charAt(1))
document.write("The character at index 2 is " + anyString.charAt(2))
document.write("The character at index 3 is " + anyString.charAt(3))
document.write("The character at index 4 is " + anyString.charAt(4))
</PRE>
<H3>See also</H3>
<LI><A HREF=#indexOf_method>indexOf</A>, <A HREF=#lastIndexOf_method>lastIndexOf</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="clear_method"><H2>clear method</H2></A>
<P>
Clears the document in a window.

<H3>Syntax</H3>
<PRE>document.clear()</PRE>

<H3>Description</H3>
<P>The clear method empties the content of a window, regardless of how the content of the window has been painted.

<H3>Method of</H3>
<P><A HREF=objects.htm#document_object>document</A>

<H3>Examples</H3>
<P>When the following function is called, the clear method empties the contents of the <I>msgWindow</I> window:
<PRE>
function windowCleaner() {
   msgWindow.document.clear()
   msgWindow.document.close()
}
</PRE>

<H3>See also</H3>
<LI><A HREF=#close_document_method>close</A>, <A HREF=#open_document_method>open</A>, <A HREF=#write_method>write</A>, <A HREF=#writeln_method>writeln</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="clearTimeout_method"><H2>clearTimeout method</H2></A>
<P>Cancels a timeout that was set with the setTimeout method.

<H3>Syntax</H3>
<PRE>clearTimeout(<I>timeoutID</I>)</PRE>
<P><I>timeoutID</I> is a timeout setting that was returned by a previous call to the setTimeout method.

<H3>Description</H3>
<P>See the description for the <A HREF=#setTimeout_method>setTimeout</A> method.

<H3>Method of</H3>
<P><A HREF=objects.htm#frame_object>frame</A>, <A HREF=objects.htm#window_object>window</A>

<H3>Examples</H3>
<P>See the examples for the <A HREF=#setTimeout_method>setTimeout</A> method.

<H3>See also</H3>
<LI><A HREF=#setTimeout_method>setTimeout</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="click_method"><H2>click method</H2></A>
<P>
Simulates a mouse click on the calling form element.

<H3>Syntax</H3>
<PRE>
1. <I>buttonName</I>.click()
2. <I>radioName</I>[<I>index</I>].click()
<BR>3. <I>checkboxName</I>.click()
</PRE>
<P><I>buttonName</I> is either the value of the NAME attribute of a button, reset, or submit object or an element in the <I>elements</I> array.
<BR><I>radioName</I> is the value of the NAME attribute of a radio object or an element in the <I>elements</I> array.
<BR><I>index</I> is an integer representing a radio button in a radio object.
<BR><I>checkboxName</I> is either the value of the NAME attribute of a checkbox object or an element in the <I>elements</I> array.

<H3>Description</H3>
<P>The effect of the click method varies according to the calling element:
<LI>For button, reset, and submit, performs the same action as clicking the button.
<LI>For a radio, selects a radio button.
<LI>For a checkbox, checks the checkbox and sets its value to on.


<H3>Method of</H3>
<P><A HREF=objects.htm#button_object>button</A>, <A HREF=objects.htm#checkbox_object>checkbox</A>, <A HREF=objects.htm#radio_object>radio</A>, <A HREF=objects.htm#reset_object>reset</A>, <A HREF=objects.htm#submit_object>submit</A>

<H3>Examples</H3>
<P>The following example toggles the selection status of the first radio button in the <I>musicType</I> radio object on the <I>musicForm</I> form:
<PRE>document.musicForm.musicType[0].click()</PRE>

<P>The following example toggles the selection status of the <I>newAge</I> checkbox on the <I>musicForm</I> form:
<PRE>document.musicForm.newAge.click()</PRE>
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="close_document_method"><H2>close method (document object)</H2></A>
<P>
Closes an output stream and forces data sent to layout to display.

<H3>Syntax</H3>
<PRE>document.close()</PRE>

<H3>Description</H3>
<P>The close method closes a stream opened with the document.open() method. If the stream was opened to layout, the close method forces the content of the stream to display. Font style tags, such as &ltBIG&gt and &ltCENTER&gt, automatically flush a layout stream.

<P>The close method also stops the "meteor shower" in the Netscape icon and displays "Document: Done" in the status bar.

<H3>Method of</H3>
<P><A HREF=objects.htm#document_object>document</A>

<H3>Examples</H3>
The following function calls document.close() to close a stream that was opened with document.open(). The document.close() method forces the content of the stream to display in the window.
<PRE>
function windowWriter1() {
   var myString = "Hello, world!"
   msgWindow.document.open()
   msgWindow.document.write(myString + "&ltP&gt")
   msgWindow.document.close()
}
</PRE>

<H3>See also</H3>
<LI><A HREF=#clear_method>clear</A>, <A HREF=#open_document_method>open</A>, <A HREF=#write_method>write</A>, <A HREF=#writeln_method>writeln</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="close_window_method"><H2>close method (window object)</H2></A>
<P>
Closes the specified window.

<H3>Syntax</H3>
<PRE><I>windowReference</I>.close()</PRE>
<P><I>windowReference</I> is a valid way of referring to a window, as described in the <A HREF=objects.htm#window_object>window</A> object.

<H3>Description</H3>
<P>The close method closes the specified window. If you call close without specifying a <I>windowReference</I>, JavaScript closes the current window.

<P>In event handlers, you must specify window.close() instead of simply using close(). Due to the scoping of static objects in JavaScript, a call to close() without specifying an object name is equivalent to document.close().

<H3>Method of</H3>
<P><A HREF=objects.htm#window_object>window</A>

<H3>Examples</H3>
<P>Any of the following examples close the current window:
<PRE>window.close()
self.close()
close()</PRE>

<P>The following example closes the <I>messageWin</I> window:
<PRE>messageWin.close()</PRE>
<P>This example assumes that the window was opened in a manner similar to the following:
<PRE>messageWin=window.open("")</PRE>

<H3>See also</H3>
<LI><A HREF=#open_window_method>open</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="confirm_method"><H2>confirm method</H2></A>
<P>
Displays a Confirm dialog box with the specified message and OK and Cancel buttons.

<H3>Syntax</H3>
<P>confirm("<I>message</I>")
<P><I>message</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>Use the confirm method to ask the user to make a decision that requires either an OK or a Cancel. The <I>message</I> argument specifies a message that prompts the user for the decision. The confirm method returns true if the user chooses OK and false if the user chooses Cancel.

<P>Although confirm is a method of the window object, you do not need to specify a <I>windowReference</I> when you call it. For example, <TT><I>windowReference</I>.confirm()</TT> is unnecessary.

<H3>Method of</H3>
<P><A HREF=objects.htm#window_object>window</A>

<H3>Examples</H3>
<P>This example uses the confirm method in the <I>confirmCleanUp()</I> function to confirm that the user of an application really wants to quit. If the user chooses OK, the custom <I>cleanUp()</I> function closes the application.
<PRE>
function confirmCleanUp() {
   if (confirm("Are you sure you want to quit this application?")) {
      cleanUp()
   }
}</PRE>
You can call the <I>confirmCleanUp()</I> function in the onClick event handler of a form's pushbutton, as shown in the following example:
<PRE>&ltINPUT TYPE="button" VALUE="Quit" onClick="confirmCleanUp()"&gt</PRE>


<H3>See also</H3>
<LI><A HREF=#alert_method>alert</A>, <A HREF=#prompt_method>prompt</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="cos_method"><H2>cos method</H2></A>
<P>
Returns the cosine of a number.

<H3>Syntax</H3>
<PRE>Math.cos(<I>number</I>)</PRE>
<P><I>number</I> is a numeric expression representing the size of an angle in radians, or a property of an existing object.

<H3>Description</H3>
<P>The cos method returns a numeric value between -1 and 1, which represents the cosine of the angle.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays the value 6.123031769111886e-017
document.write("The cosine of PI/2 radians is " + Math.cos(Math.PI/2))

//Displays the value -1
document.write("&ltP&gtThe cosine of PI radians is " + Math.cos(Math.PI))

//Displays the value 1
document.write("&ltP&gtThe cosine of 0 radians is " + Math.cos(0))
</PRE>

<H3>See also</H3>
<LI><A HREF=#acos_method>acos</A>, <A HREF=#asin_method>asin</A>, <A HREF=#atan_method>atan</A>, <A HREF=#sin_method>sin</A>, <A HREF=#tan_method>tan</A> methods

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="escape_method"><H2>escape function</H2></A>
<P>
Returns the ASCII encoding of an argument in the ISO Latin-1 character set.

<H3>Syntax</H3>
<PRE>escape("<I>string</I>")</PRE>
<P><I>string</I> is a non-alphanumeric string in the ISO Latin-1 character set, or a property of an existing object.

<H3>Description</H3>
<P>The escape function is not a method associated with any object, but is part of the language itself.

<P>The value returned by the escape function is a string of the form "%xx", where <I>xx</I> is the ASCII encoding of a character in the argument. If you pass the escape function an alphanumeric character, the escape function returns the same character.


<H3>Examples</H3>
<P>The following example returns "%26"
<PRE>
escape("&")
</PRE>

<P>The following example returns "%21%23"
<PRE>
escape("!#")
</PRE>

<H3>See also</H3>
<LI><A HREF=#unescape_method>unescape</A> function

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="eval_method"> <H2>eval function</H2></A>
<P>
The eval function evaluates a string and returns a value.

<H3>Syntax</H3>
<PRE>eval(<I>string</I>)</PRE>
<I>string</I> is any string representing a JavaScript expression, statement, or sequence of statements.
The expression can include variables and properties of existing objects.

<H3>Description</H3>
<P>The eval function is a built-in JavaScript function. 
It is not a method associated with any object, but is part of the language itself.

<P>The argument of the eval function is a string. 
Do not call eval to evaluate an arithmetic expression.  JavaScript evaluates arithmetic expressions
automatically.
If the argument represents an expression, eval evaluates the expression.
If the argument represents one or more JavaScript statements, eval performs the statements.

<P>If you construct an arithmetic expression as a string, you can use eval to evaluate it  
at a later time. For example, suppose you have a variable x.  
You can postpone evaluation of an expression involving x by assigning the string value of the expression,
say "3*x + 2", to a variable, and then calling eval at a later point in your script.

<H3>Example</H3>

<P>
Both of the write statements below display 42.
The first evaluates the string "x + y + 1", and the second evaluates the string "42".

<PRE>
var x = 2
var y = 39
var z = "42"
document.write(eval("x + y + 1"), "<BR>" ) 
document.write(eval(z), "<BR>" )
</PRE>

<P>In the following example, the <I>getFieldName(n)</I> function returns the name of the nth form element 
as a string.  The first statement assigns the string value of the third form element
to the variable <i>field.</i>
The second statement uses eval to display the value of the form element.
<PRE>
var field = getFieldName(3) 
document.write("The field named ", field, " has value of ", eval(field + ".value"))
</PRE>

<P>The following example uses eval to evaluate the string <i>str</i>.
This string consists of JavaScript statements that opens an alert dialog box and
assigns z a value of 42 if x is five, and assigns zero to z otherwise.  
When the second statement is executed, eval will cause these statements to be performed, and 
it will also evaluate the set of statements and return the value that is assigned to z.

<PRE>
var str = "if (x == 5) {alert('z is 42'); z = 42;} else z = 0; "
document.write("<P>z is ", eval(str))
</PRE>

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="exp_method"><H2>exp method</H2></A>
<P>
Returns e<SUP><I>number</I></SUP>, where <I>number</I> is the argument, and <I>e</I> is Euler's constant, the base of the natural logarithms.

<H3>Syntax</H3>
<PRE>Math.exp(<I>number</I>)</PRE>
<I>number</I> is any numeric expression or a property of an existing object.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays the value 2.718281828459045
document.write("The value of e&ltSUP&gt1&lt/SUP&gt is " + Math.exp(1))
</PRE>

<H3>See also</H3>
<LI><A HREF=#log_method>log</A>, <A HREF=#pow_method>pow</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="fixed_method"><H2>fixed method</H2></A>
<P>
Causes a string to be displayed in fixed-pitch font as if it were in a &ltTT&gt tag.

<H3>Syntax</H3>
<PRE><I>stringName</I>.fixed()</PRE>
<P><I>stringName</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>Use the fixed method with the write or writeln methods to format and display a string in a document.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses the fixed method to change the formatting of a string:
<PRE>
var worldString="Hello, world"

document.write(worldString.fixed())
</PRE>

<P>The previous example produces the same output as the following HTML:
<PRE>
<TT>&ltTT&gtHello, world&lt/TT&gt</TT>
</PRE>

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="floor_method"><H2>floor method</H2></A>
<P>
Returns the greatest integer less than or equal to a number.

<H3>Syntax</H3>
<PRE>Math.floor(<I>number</I>)</PRE>
<P><I>number</I> is any numeric expression or a property of an existing object.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays the value 45
document.write("&ltP&gtThe floor of 45.95 is " + Math.floor(45.95))

//Displays the value -46
document.write("&ltP&gtThe floor of -45.95 is " + Math.floor(-45.95))
</PRE>

<H3>See also</H3>
<LI><A HREF=#ceil_method>ceil</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="focus_method"><H2>focus method</H2></A>
<P>
Gives focus to the specified object.

<H3>Syntax</H3>
<PRE>
1. <I>passwordName</I>.focus()
2. <I>selectName</I>.focus()
3. <I>textName</I>.focus()
4. <I>textareaName</I>.focus()
</PRE>
<P><I>passwordName</I> is either the value of the NAME attribute of a password object or an element in the <I>elements</I> array.
<BR><I>selectName</I> is either the value of the NAME attribute of a select object or an element in the <I>elements</I> array.
<BR><I>textName</I> is either the value of the NAME attribute of a text object or an element in the <I>elements</I> array.
<BR><I>textareaName</I> is either the value of the NAME attribute of a textarea object or an element in the <I>elements</I> array.

<H3>Description</H3>
<P>Use the focus method to navigate to a specific form element and give it focus. You can then either programatically enter a value in the element or let the user enter a value.

<H3>Method of</H3>
<P><A HREF=objects.htm#password_object>password</A>, <A HREF=objects.htm#select_object>select</A>, <A HREF=objects.htm#text_object>text</A>, <A HREF=objects.htm#textarea_object>textarea</A>

<H3>Examples</H3>
<P>In the following example, the <I>checkPassword</I> function confirms that a user has entered a valid password. If the password is not valid, the focus method returns focus to the password object and the select method highlights it so the user can re-enter the password.
<PRE>
function checkPassword(userPass) {
   if (badPassword) {
      alert("Please enter your password again.")
      userPass.focus()
      userPass.select()
   }
}</PRE>
This example assumes that the password is defined as:
<PRE>&ltINPUT TYPE="password" NAME="userPass"&gt</PRE>

<H3>See also</H3>
<LI><A HREF=#blur_method>blur</A>, <A HREF=#select_method>select</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="fontcolor_method"><H2>fontcolor method</H2></A>
<P>
Causes a string to be displayed in the specified color as if it were in a &ltFONT COLOR=<I>color</I>&gt tag.

<H3>Syntax</H3>
<PRE><I>stringName</I>.fontcolor(<I>color</I>)</PRE>
<P><I>stringName</I> is any string or a property of an existing object.
<BR><I>color</I> is a string or a property of an existing object, expressing the color as a hexadecimal RGB triplet or as one of the string literals listed in <A HREF=colors.htm>Color Values</A>.

<H3>Description</H3>
<P>Use the fontcolor method with the write or writeln methods to format and display a string in a document.
<P>If you express <I>color</I> as a hexadecimal RGB triplet, you must use the format rrggbb. For example, the hexadecimal RGB values for salmon are red=FA, green=80, and blue=72, so the RGB triplet for salmon is "FA8072".

<P>The fontcolor method overrides a value set in the fgColor property.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses the fontcolor method to change the color of a string
<PRE>
var worldString="Hello, world"

document.write(worldString.fontcolor("maroon") +
   " is maroon in this line")
document.write("&ltP&gt" + worldString.fontcolor("salmon") +
   " is salmon in this line")
document.write("&ltP&gt" + worldString.fontcolor("red") +
   " is red in this line")

document.write("&ltP&gt" + worldString.fontcolor("8000") +
   " is maroon in hexadecimal in this line")
document.write("&ltP&gt" + worldString.fontcolor("FA8072") +
   " is salmon in hexadecimal in this line")
document.write("&ltP&gt" + worldString.fontcolor("FF00") +
   " is red in hexadecimal in this line")
</PRE>

<P>The previous example produces the same output as the following HTML:
<PRE>
<TT>&ltFONT COLOR="maroon"&gtHello, world&lt/FONT&gt is maroon in this line</TT>
<TT>&ltP&gt&ltFONT COLOR="salmon"&gtHello, world&lt/FONT&gt is salmon in this line</TT>
<TT>&ltP&gt&ltFONT COLOR="red"&gtHello, world&lt/FONT&gt is red in this line</TT>

<TT>&ltFONT COLOR="8000"&gtHello, world&lt/FONT&gt is maroon in hexadecimal in this line</TT>
<TT>&ltP&gt&ltFONT COLOR="FA8072"&gtHello, world&lt/FONT&gt is salmon in hexadecimal in this line</TT>
<TT>&ltP&gt&ltFONT COLOR="FF00"&gtHello, world&lt/FONT&gt is red in hexadecimal in this line</TT>
</PRE>

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="fontsize_method"><H2>fontsize method</H2></A>
<P>
Causes a string to be displayed in the specified font size as if it were in a &ltFONTSIZE=<I>size</I>&gt tag.

<H3>Syntax</H3>
<PRE><I>stringName</I>.fontsize(<I>size</I>)</PRE>
<P><I>stringName</I> is any string or a property of an existing object.
<BR><I>size</I> is an integer between one and seven, or a string representing a signed integer between 1 and 7, or a property of an existing object.

<H3>Description</H3>
<P>Use the fontsize method with the write or writeln methods to format and display a string in a document. When you specify <I>size</I> as an integer, you set the size of <I>stringName</I> to one of the seven defined sizes. When you specify <I>size</I> as a string such as "-2", you adjust the font size of <I>stringName</I> relative to the size set in the &ltBASEFONT&gt tag.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses string methods to change the size of a string:
<PRE>
var worldString="Hello, world"

document.write(worldString.small())
document.write("&ltP&gt" + worldString.big())
document.write("&ltP&gt" + worldString.fontsize(7))
</PRE>

<P>The previous example produces the same output as the following HTML:
<PRE>
<TT>&ltSMALL&gtHello, world&lt/SMALL&gt</TT>
<TT>&ltP&gt&ltBIG&gtHello, world&lt/BIG&gt</TT>
<TT>&ltP&gt&ltFONTSIZE=7&gtHello, world&lt/FONTSIZE&gt</TT>
</PRE>

<H3>See also</H3>
<LI><A HREF=#big_method>big</A>, <A HREF=#small_method>small</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="forward_method"><H2>forward method</H2></A>
<P>
Loads the next URL in the history list.

<H3>Syntax</H3>
<PRE>history.forward()</PRE>

<H3>Description</H3>
<P>This method performs the same action as a user choosing the Forward button in the Navigator. The forward method is the same as <TT>history.go(1)</TT>.

<H3>Method of</H3>
<P><A HREF=objects.htm#history_object>history</A>

<H3>Examples</H3>
The following custom buttons perform the same operations as the Navigator Back and Forward buttons:
<PRE>
&ltP&gt&ltINPUT TYPE="button" VALUE="< Back"
   onClick="history.back()"&gt
&ltP&gt&ltINPUT TYPE="button" VALUE="> Forward"
   onClick="history.forward()"&gt
</PRE>

<H3>See also</H3>
<LI><A HREF=#back_method>back</A>, <A HREF=#go_method>go</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="getDate_method"><H2>getDate method</H2></A>
<P>
Returns the day of the month for the specified date.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.getDate()</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.

<H3>Description</H3>
<P>The value returned by getDate is an integer between 1 and 31.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<P>
The second statement below assigns the value 25 to the variable <I>day</I>, based on the value of the date object <I>Xmas95</I>.
<PRE>
Xmas95 = new Date("December 25, 1995 23:15:00")
day = Xmas95.getDate()
</PRE>

<H3>See also</H3>
<LI><A HREF=#setDate_method>setDate</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="getDay_method"><H2>getDay method</H2></A>
<P>
Returns the day of the week for the specified date.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.getDay()</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.

<H3>Description</H3>
<P>
The value returned by getDay is an integer corresponding to the day of the week: zero for Sunday, one for Monday, two for Tuesday, and so on.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<P>
The second statement below assigns the value 1 to <I>weekday</I>, based on the value of the date object <I>Xmas95</I>. This is because December 25, 1995 is a Monday.
<PRE>
Xmas95 = new Date("December 25, 1995 23:15:00")
weekday = Xmas95.getDay()
</PRE>

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="getHours_method"><H2>getHours method</H2></A>
<P>
Returns the hour for the specified date.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.getHours()</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.

<H3>Description</H3>
<P>
The value returned by getHours is an integer between 0 and 23.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<P>
The second statement below assigns the value 23 to the variable <I>hours</I>, based on the value of the date object <I>Xmas95</I>.
<PRE>
Xmas95 = new Date("December 25, 1995 23:15:00")
hours = Xmas95.getHours()
</PRE>


<H3>See also</H3>
<LI><A HREF=#setHours_method>setHours</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="getMinutes_method"><H2>getMinutes method</H2></A>
<P>
Returns the minutes in the specified date.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.getMinutes()</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.


<H3>Description</H3>
<P>
The value returned by getMinutes is an integer between 0 and 59.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<P>
The second statement below assigns the value 15 to the variable <I>minutes</I>, based on the value of the date object <I>Xmas95</I>.
<PRE>
Xmas95 = new Date("December 25, 1995 23:15:00")
minutes = Xmas95.getMinutes()
</PRE>

<H3>See also</H3>
<LI><A HREF=#setMinutes_method>setMinutes</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="getMonth_method"><H2>getMonth method</H2></A>
<P>
Returns the month in the specified date.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.getMonth()</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.


<H3>Description</H3>
<P>
The value returned by getMonth is an integer between zero and eleven. Zero corresponds to January, one to February, and so on.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<P>
The second statement below assigns the value 11 to the variable <I>month</I>, based on the value of the date object <I>Xmas95</I>.
<PRE>
Xmas95 = new Date("December 25, 1995 23:15:00")
month = Xmas95.getDate()
</PRE>


<H3>See also</H3>
<LI><A HREF=#setMonth_method>setMonth</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="getSeconds_method"><H2>getSeconds method</H2></A>
<P>
Returns the seconds in the current time.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.getSeconds()</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.

<H3>Description</H3>
<P>
The value returned by getSeconds is an integer between 0 and 59.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<P>
The second statement below assigns the value 30 to the variable <I>secs</I>, based on the value of the date object <I>Xmas95</I>.
<PRE>
Xmas95 = new Date("December 25, 1995 23:15:30")
secs = Xmas95.getSeconds()
</PRE>

<H3>See also</H3>
<LI><A HREF=#setSeconds_method>setSeconds</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="getTime_method"><H2>getTime method</H2></A>
<P>
Returns the numeric value corresponding to the time for the specified date.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.getTime()</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.


<H3>Description</H3>
<P>
The value returned by the getTime method is the number of milliseconds since 1 January 1970 00:00:00. You can use this method to help assign a date and time to another date object.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<P>
The following example assigns the date value of <I>theBigDay</I> to <I>sameAsBigDay</I>.

<PRE>
theBigDay = new Date("July 1, 1999")
sameAsBigDay = new Date()
sameAsBigDay.setTime(theBigDay.getTime())
</PRE>

<H3>See also</H3>
<LI><A HREF=#setTime_method>setTime</A> method
<!----------------------------------------------------------------->
<HR>
<A NAME="getTimezoneOffset_method"><H2>getTimezoneOffset method</H2></A>
<P>
Returns the time zone offset in minutes for the current locale.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.getTimezoneOffset()</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.

<H3>Description</H3>
<P>
The time zone offset is the difference between local time and GMT. Daylight savings time prevents this value from being a constant.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>

<PRE>
x = new Date()
currentTimeZoneOffsetInHours = x.getTimezoneOffset()/60
</PRE>

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="getYear_method"><H2>getYear method</H2></A>
<P>
Returns the year in the specified date.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.getYear()</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.

<H3>Description</H3>
<P>
The value returned by getYear is the year less 1900. For example, if the year is 1976, the value returned is 76.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<P>
The second statement below assigns the value 95 to the variable <I>year</I>, based on the value of the date object <I>Xmas95</I>.
<PRE>
Xmas95 = new Date("December 25, 1995 23:15:00")
year = Xmas95.getYear()
</PRE>


<H3>See also</H3>
<LI><A HREF=#setYear_method>setYear</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="go_method"><H2>go method</H2></A>
<P>
Loads a URL from the history list.

<H3>Syntax</H3>
<PRE>history.go(<I>delta</I> | "<I>location</I>")</PRE>
<I>delta</I> is an integer or a property of an existing object, representing a relative position in the history list.
<BR><I>location</I> is a string or a property of an existing object, representing all or part of a URL in the history list.

<H3>Description</H3>
<P>The go method navigates to the location in the history list determined by the argument that you specify. You can interactively display the history list by choosing History from the Window menu. Up to 10 items in the history list are also displayed on the Go menu.

<P>The <I>delta</I> argument is a positive or negative integer. If <I>delta</I> is greater than zero, the go method loads the URL that is that number of entries forward in the history list; otherwise, it loads the URL that is that number of entries backward in the history list. If delta is 0, Navigator reloads the current page.

<P>The <I>location</I> argument is a string. Use <I>location</I> to load the nearest history entry whose URL contains <I>location</I> as a substring. The <I>location</I> to URL matching is case-insensitive. Each section of a URL contains different information. See the <A HREF=objects.htm#location_object>location</A> object for a description of the URL components.

<H3>Method of</H3>
<P><A HREF=objects.htm#history_object>history</A>

<H3>Examples</H3>
<P>The following button navigates to the nearest history entry that contains the string "home.netscape.com":
<PRE>
&ltP&gt&ltINPUT TYPE="button" VALUE="Go"
   onClick="history.go('home.netscape.com')"&gt
</PRE>
<P>The following button navigates to the URL that is three entries backward in the history list:
<PRE>
&ltP&gt&ltINPUT TYPE="button" VALUE="Go"
   onClick="history.go(-3)"&gt
</PRE>

<H3>See also</H3>
<LI><A HREF=#back_method>back</A>, <A HREF=#forward_method>forward</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="indexOf_method"><H2>indexOf method</H2></A>
<P>
Returns the index within the calling string object of the first occurrence of the specified value, starting the search at <I>fromIndex</I>.

<H3>Syntax</H3>
<PRE><I>stringName</I>.indexOf(<I>searchValue</I>, [<I>fromIndex</I>])</PRE>
<P><I>stringName</I> is any string or a property of an existing object.
<BR><I>searchValue</I> is a string or a property of an existing object, representing the value to search for.
<BR><I>fromIndex</I> is the location within the calling string to start the search from. It can be any integer from 0 to <I>stringName</I>.length - 1 or a property of an existing object.

<H3>Description</H3>
<P>Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character is <I>stringName</I>.length - 1.
<P>If you do not specify a value for <I>fromIndex</I>, JavaScript assumes 0 by default. If <I>searchValue</I> is not found, JavaScript returns -1.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses indexOf and lastIndexOf to locate values in the string "Brave new world".
<PRE>
var anyString="Brave new world"

//Displays 8
document.write("&ltP&gtThe index of the first w from the beginning is " +
   anyString.indexOf("w"))
//Displays 10
document.write("&ltP&gtThe index of the first w from the end is " +
   anyString.lastIndexOf("w"))
//Displays 6
document.write("&ltP&gtThe index of 'new' from the beginning is " +
   anyString.indexOf("new"))
//Displays 6
document.write("&ltP&gtThe index of 'new' from the end is " +
   anyString.lastIndexOf("new"))
</PRE>

<H3>See also</H3>
<LI><A HREF=#charAt_method>charAt</A>, <A HREF=#lastIndexOf_method>lastIndexOf</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="isNaN_method"><H2>isNaN function</H2></A>
<P>
On Unix platforms, evaluates an argument to determine if it is "NaN" (not a number).

<H3>Syntax</H3>
<PRE>isNaN(<I>testValue</I>)</PRE>
<P><I>testValue</I> is the value you want to evaluate.

<H3>Description</H3>
<P>The isNaN function is a built-in JavaScript function. It is not a method associated with any object, but is part of the language itself. isNaN is available on Unix platforms only.

<P>On all platforms except Windows, the parseFloat and parseInt functions return "NaN" when they evaluate a value that is not a number. The "NaN" value is not a number in any radix. You can call the isNaN function to determine if the result of parseFloat or parseInt is "NaN". If "NaN" is passed on to arithmetic operations, the operation results will also be "NaN".

<P>The isNaN function returns true or false.

<H3>Examples</H3>
<P>
The following example evaluates <I>floatValue</I> to determine if it is a number, then calls a procedure accordingly.
<PRE>
floatValue=parseFloat(toFloat)

if isNaN(floatValue) {
   notFloat()
} else {
   isFloat()
}
</PRE>

<H3>See also</H3>
<LI><A HREF=#parseFloat_method>parseFloat</A>, <A HREF=#parseInt_method>parseInt</A> functions
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="italics_method"><H2>italics method</H2></A>
<P>
Causes a string to be italicized as if it were in an &ltI&gt tag.

<H3>Syntax</H3>
<PRE><I>stringName</I>.italics()</PRE>
<P><I>stringName</I> is any string or a property of an existing object.


<H3>Description</H3>
<P>Use the italics method with the write or writeln methods to format and display a string in a document.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses string methods to change the formatting of a string:
<PRE>
var worldString="Hello, world"

document.write(worldString.blink())
document.write("&ltP&gt" + worldString.bold())
document.write("&ltP&gt" + worldString.italics())
document.write("&ltP&gt" + worldString.strike())
</PRE>

<P>The previous example produces the same output as the following HTML:
<PRE>
<TT>&ltBLINK&gtHello, world&lt/BLINK&gt</TT>
<TT>&ltP&gt&ltB&gtHello, world&lt/B&gt</TT>
<TT>&ltP&gt&ltI&gtHello, world&lt/I&gt</TT>
<TT>&ltP&gt&ltSTRIKE&gtHello, world&lt/STRIKE&gt</TT>
</PRE>

<H3>See also</H3>
<LI><A HREF=#blink_method>blink</A>, <A HREF=#bold_method>bold</A>, <A HREF=#strike_method>strike</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="lastIndexOf_method"><H2>lastIndexOf method</H2></A>
<P>
Returns the index within the calling string object of the last occurrence of the specified value. The calling string is searched backwards, starting at <I>fromIndex</I>.


<H3>Syntax</H3>
<PRE><I>stringName</I>.lastIndexOf(<I>searchValue</I>, [<I>fromIndex</I>])</PRE>
<P><I>stringName</I> is any string or a property of an existing object.
<BR><I>searchValue</I> is a string or a property of an existing object, representing the value to search for.
<BR><I>fromIndex</I> is the location within the calling string to start the search from. It can be any integer from 0 to <I>stringName</I>.length - 1 or a property of an existing object.

<H3>Description</H3>
<P>Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character is <I>stringName</I>.length - 1.
<P>If you do not specify a value for <I>fromIndex</I>, JavaScript assumes <I>stringName</I>.length - 1 (the end of the string) by default. If <I>searchValue</I> is not found, JavaScript returns -1.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses indexOf and lastIndexOf to locate values in the string "Brave new world".
<PRE>
var anyString="Brave new world"

//Displays 8
document.write("&ltP&gtThe index of the first w from the beginning is " +
   anyString.indexOf("w"))
//Displays 10
document.write("&ltP&gtThe index of the first w from the end is " +
   anyString.lastIndexOf("w"))
//Displays 6
document.write("&ltP&gtThe index of 'new' from the beginning is " +
   anyString.indexOf("new"))
//Displays 6
document.write("&ltP&gtThe index of 'new' from the end is " +
   anyString.lastIndexOf("new"))
</PRE>

<H3>See also</H3>
<LI><A HREF=#charAt_method>charAt</A>, <A HREF=#indexOf_method>indexOf</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="link_method"><H2>link method</H2></A>
<P>
Creates an HTML hypertext link that jumps to another URL.

<H3>Syntax</H3>
<PRE><I>linkText</I>.link(<I>hrefAttribute</I>)</PRE>
<P><I>linkText</I> is any string or a property of an existing object.
<BR><I>hrefAttribute</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>Use the link method with the write or writeln methods to programatically create and display a hypertext link in a document. Create the link with the link method, then call write or writeln to display the link in a document.

<P>In the syntax, the <I>linkText</I> string represents the literal text that you want the user to see. The <I>hrefAttribute</I> string represents the HREF attribute of the &ltA&gt tag, and it should be a valid URL. Each section of a URL contains different information. See the <A HREF=objects.htm#location_object>location</A> object for a description of the URL components.

<P>Links created with the link method become elements in the links array. See the <A HREF=objects.htm#link_object>link</A> object for information about the links array.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
<P>The following example displays the word "Netscape" as a hypertext link that returns the user to the Netscape home page:
<PRE>
var hotText="Netscape"
var URL="http://www.netscape.com"

document.open()
document.write("Click to return to " + hotText.link(URL))
document.close()
</PRE>
<P>The previous example produces the same output as the following HTML:
<P><TT>Click to return to &ltA HREF="http://www.netscape.com"&gtNetscape&lt/A&gt</TT>

<H3>See also</H3>
<LI><A HREF=#anchor_method>anchor</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="log_method"><H2>log method</H2></A>
<P>
Returns the natural logarithm (base <I>e</I>) of a number.

<H3>Syntax</H3>
<PRE>Math.log(<I>number</I>)</PRE>
<I>number</I> is any positive numeric expression or a property of an existing object.

<H3>Description</H3>
<P>If the value of <I>number</I> is outside the suggested range, the return value is always -1.797693134862316e+308.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays the value 2.302585092994046
document.write("The natural log of 10 is " + Math.log(10))

//Displays the value 0
document.write("&ltP&gtThe natural log of 1 is " + Math.log(1))

//Displays the value -1.797693134862316e+308
//because the argument is out of range
document.write("&ltP&gtThe natural log of 0 is " + Math.log(0))
</PRE>

<H3>See also</H3>
<LI><A HREF=#exp_method>exp</A>, <A HREF=#pow_method>pow</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="max_method"><H2>max method</H2></A>
<P>
Returns the greater of two numbers.

<H3>Syntax</H3>
<PRE>max(<I>number1, number2</I>)</PRE>
<I>number1</I> and <I>number2</I> are any numeric arguments or the properties of existing objects.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays the value 20
document.write("The maximum value is " + Math.max(10,20))

//Displays the value -10
document.write("&ltP&gtThe maximum value is " + Math.max(-10,-20))
</PRE>

<H3>See also</H3>
<LI><A HREF=#min_method>min</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="min_method"><H2>min method</H2></A>
<P>
Returns the lesser of two numbers.

<H3>Syntax</H3>
<PRE>min(<I>number1, number2</I>)</PRE>
<I>number1</I> and <I>number2</I> are any numeric arguments or the properties of existing objects.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays the value 10
document.write("<P>The minimum value is " + Math.min(10,20))

//Displays the value -20
document.write("&ltP&gtThe minimum value is " + Math.min(-10,-20))
</PRE>

<H3>See also</H3>
<LI><A HREF=#max_method>max</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="open_document_method"><H2>open method (document object)</H2></A>
<P>
Opens a stream to collect the output of write or writeln methods.

<H3>Syntax</H3>
<PRE>document.open(["<I>mimeType</I>"])</PRE>
<P>
<I>mimeType</I> specifies any of the following document types:
<PRE>
   text/html
   text/plain
   image/gif
   image/jpeg
   image/x-bitmap
   <I>plugIn</I>
</PRE>
<I>plugIn</I> is any two-part plug-in MIME type that Netscape supports.

<H3>Description</H3>

<P>The open method opens a stream to collect the output of write or writeln methods. If the <I>mimeType</I> is text or image, the stream is opened to layout; otherwise, the stream is opened to a plug-in. If a document exists in the target window, the open method clears it.

<P>End the stream by using the document.close() method. The close method causes text or images that were sent to layout to display. After using document.close(), issue document.open() again when you want to begin another output stream. 

<P><I>mimeType</I> is an optional argument that specifies the type of document to which you are writing. If you do not specify a <I>mimeType</I>, the open method assumes <TT>text/html</TT> by default.

<P>Following is a description of <I>mimeType</I>:
<LI><I>text/html</I> specifies a document containing ASCII text with HTML formatting.
<LI><I>text/plain</I> specifies a document containing plain ASCII text with end-of-line characters to delimit displayed lines.
<LI><I>image/gif</I> specifies a document with encoded bytes constituting a GIF header and pixel data.
<LI><I>image/jpeg</I> specifies a document with encoded bytes constituting a JPEG header and pixel data.
<LI><I>image/x-bitmap</I> specifies a document with encoded bytes constituting a bitmap header and pixel data.
<LI><I>plugIn</I> loads the specified plug-in and uses it as the destination for write and writeln methods. For example, "x-world/vrml" loads the VR Scout VRML plug-in from Chaco Communications, and "application/x-director" loads the Macromedia Shockwave plug-in.


<H3>Method of</H3>
<P><A HREF=objects.htm#document_object>document</A>

<H3>Examples</H3>
The following function calls document.open() to open a stream before issuing a write method:
<PRE>
function windowWriter1() {
   var myString = "Hello, world!"
   msgWindow.document.open()
   msgWindow.document.write("&ltP&gt" + myString)
   msgWindow.document.close()
}
</PRE>

In the following example, the <I>probePlugIn()</I> function determines whether a user has the ShockWave plug-in installed:
<PRE>
function probePlugIn(mimeType) {
   var havePlugIn = false
   var tiny = window.open("", "teensy", "width=1,height=1")
   if (tiny != null) {
      if (tiny.document.open(mimeType) != null)
         havePlugIn = true
      tiny.close()
   }
   return havePlugIn
}

var haveShockWavePlugIn = probePlugIn("application/x-director")
</PRE>

<H3>See also</H3>
<LI><A HREF=#clear_method>clear</A>, <A HREF=#close_document_method>close</A>, <A HREF=#write_method>write</A>, <A HREF=#writeln_method>writeln</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="open_window_method"><H2>open method (window object)</H2></A>
<P>
Opens a new web browser window.

<H3>Syntax</H3>
<PRE>
[<I>windowVar</I> = ][window].open("<I>URL</I>", "<I>windowName</I>", ["<I>windowFeatures</I>"])
</PRE>
<P><I>windowVar</I> is the name of a new window. Use this variable when referring to a window's properties, methods, and containership.
<BR><I>URL</I> specifies the URL to open in the new window. See the <A HREF=objects.htm#location_object>location</A> object for a description of the URL components.
<BR><I>windowName</I> is the window name to use in the TARGET attribute of a &LTFORM&GT or &LTA&GT tag. <I>windowName</I> can contain only alphanumeric or underscore (_) characters.
<BR><I>windowFeatures</I> is a comma-separated list of any of the following options and values:
<PRE>
   toolbar[=yes|no]|[=1|0]
   location[=yes|no]|[=1|0]
   directories[=yes|no]|[=1|0]
   status[=yes|no]|[=1|0]
   menubar[=yes|no]|[=1|0]
   scrollbars[=yes|no]|[=1|0]
   resizable[=yes|no]|[=1|0]
   width=<I>pixels</I>
   height=<I>pixels</I>
</PRE>
<P>You may use any subset of these options. Separate options with a comma. Do not put spaces between the options.
<P><I>pixels</I> is a positive integer specifying the dimension in pixels.

<H3>Description</H3>
<P>The open method opens a new web browser window on the client, similar to choosing File|New Web Browser from the menu of the Navigator. The <I>URL</I> argument specifies the URL contained by the new window. If <I>URL</I> is an empty string, a new, empty window is created.

<P>In event handlers, you must specify window.open() instead of simply using open(). Due to the scoping of static objects in JavaScript, a call to open() without specifying an object name is equivalent to document.open().

<P><I>windowFeatures</I> is an optional, comma-separated list of options for the new window. The boolean <I>windowFeatures</I> options are set to true if they are specified without values, or as <TT>yes</TT> or <TT>1</TT>. For example, <TT>open("", "messageWindow", "toolbar")</TT> and <TT>open("", "messageWindow", "toolbar=1")</TT> both set the toolbar option to true. If <I>windowName</I> does not specify an existing window and you do not specify <I>windowFeatures</I>, all boolean <I>windowFeatures</I> are true by default. If you specify any item in <I>windowFeatures</I>, all other Boolean <I>windowFeatures</I> are false unless you explicitly specify them.

<P>Following is a description of the <I>windowFeatures</I>:
<LI><I>toolbar</I> creates the standard Navigator toolbar, with buttons such as "Back" and "Forward", if true
<LI><I>location</I> creates a Location entry field, if true
<LI><I>directories</I> creates the standard Navigator directory buttons, such as "What's New" and "What's Cool", if true
<LI><I>status</I> creates the status bar at the bottom of the window, if true
<LI><I>menubar</I> creates the menu at the top of the window, if true
<LI><I>scrollbars</I> creates horizontal and vertical scrollbars when the document grows larger than the window dimensions, if true
<LI><I>resizable</I> allows a user to resize the window, if true
<LI><I>width</I> specifies the width of the window in pixels
<LI><I>height</I> specifies the height of the window in pixels

<H3>Method of</H3>
<P><A HREF=objects.htm#window_object>window</A>

<H3>Examples</H3>
<P>In the following example, the windowOpener function opens a window and uses write methods to display a message:
<PRE>function windowOpener() {
   msgWindow=window.open("","displayWindow","menubar=yes")
   msgWindow.document.write
      ("&ltHEAD&gt&ltTITLE&gtMessage window&lt/TITLE&gt&lt/HEAD&gt")
   msgWindow.document.write
      ("&ltCENTER&gt&ltBIG&gt&ltB&gtHello, world!&lt/B&gt&lt/BIG&gt&lt/CENTER&gt")
}
</PRE>
<P>
The following is an onClick event handler that opens a new client window displaying the content specified in the file <I>sesame.htm</I>. The window opens with the specified option settings; all other options are false because they are not specified.
<xmp>
<FORM NAME="myform">
<INPUT TYPE="button" NAME="Button1" VALUE="Open Sesame!"
   onClick="window.open
   ('sesame.htm', 'newWin', 'scrollbars=yes,status=yes,width=300,height=300')">
</FORM>
</xmp>
<P>
Notice the use of single quotes (') inside the onClick event handler.


<H3>See also</H3>
<LI><A HREF=#close_window_method>close</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="parse_method"><H2>parse method</H2></A>
<P>
Returns the number of milliseconds in a date string since January 1, 1970 00:00:00, local time.

<H3>Syntax</H3>
<PRE>Date.parse(<I>dateString</I>)</PRE>
<I>dateString</I> is a string representing a date or a property of an existing object.

<H3>Description</H3>
<P>
The parse method takes a date string (such as "Dec 25, 1995"), and returns the number of milliseconds since January 1, 1970 00:00:00 (local time). This function is useful for setting date values based on string values, for example in conjunction with the setTime method and the Date object.
<P>
Given a string representing a time, parse returns the time value. It accepts the IETF standard date syntax: "Mon, 25 Dec 1995 13:30:00 GMT". It understands the continental US time zone abbreviations, but for general use, use a time zone offset, for example "Mon, 25 Dec 1995 13:30:00 GMT+0430" (4 hours, 30 minutes west of the Greenwich meridian). If you do not specify a time zone, the local time zone is assumed. GMT and UTC are considered equivalent. 

<P>
Because the parse function is a static method of Date, you always use it as <code>Date.parse()</code>, rather than as a method of a date object you created.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<P>
If <I>IPOdate</I> is an existing date object, then 
<PRE>
IPOdate.setTime(Date.parse("Aug 9, 1995"))
</PRE>

<H3>See also</H3>
<LI><A HREF=#UTC_method>UTC</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="parseFloat_method"><H2>parseFloat function</H2></A>
<P>
Parses a string argument and returns a floating point number.

<H3>Syntax</H3>
<PRE>parseFloat(<I>string</I>)</PRE>
<P><I>string</I> is a string that represents the value you want to parse.

<H3>Description</H3>
<P>The parseFloat function is a built-in JavaScript function. It is not a method associated with any object, but is part of the language itself.

<P>parseFloat parses its argument, a string, and returns a floating point number. If it encounters a character other than a sign ( + or -), numeral (0-9), a decimal point, or an exponent, then it returns the value up to that point and ignores that character and all succeeding characters.

<P>If the first character cannot be converted to a number, parseFloat returns one of the following values:
<LI>0 on Windows platforms.
<LI>"NaN" on any other platform, indicating that the value is not a number.

<P>For arithmetic purposes, the "NaN" value is not a number in any radix. You can call the isNaN function to determine if the result of parseFloat is "NaN". If "NaN" is passed on to arithmetic operations, the operation results will also be "NaN".

<H3>Examples</H3>
<P>
The following examples all return 3.14:
<PRE>
parseFloat("3.14")
parseFloat("314e-2")
parseFloat("0.0314E+2")
var x = "3.14"
parseFloat(x)
</PRE>
<P>
The following example returns "NaN" or 0:
<PRE>
parseFloat("FF2")
</PRE>

<H3>See also</H3>
<LI><A HREF=#isNaN_method>isNaN</A>, <A HREF=#parseInt_method>parseInt</A> functions

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="parseInt_method"><H2>parseInt function</H2></A>
<P>
Parses a string argument and returns an integer of the specified radix or base.

<H3>Syntax</H3>
<PRE>parseInt(<I>string</I> [,<I>radix</I>])</PRE>
<P><I>string</I> is a string that represents the value you want to parse.
<BR><I>radix</I> is an integer that represents the radix of the return value.

<H3>Description</H3>
<P>The parseInt function is a built-in JavaScript function. It is not a method associated with any object, but is part of the language itself.

<P>The parseInt function parses its first argument, a string, and attempts to return an integer of the specified radix (base). For example, a radix of 10 indicates to convert to a decimal number, 8 octal, 16 hexadecimal, and so on. For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), A through F are used.

<P>If parseInt encounters a character that is not a numeral in the specified radix, it ignores it and all succeeding characters and returns the integer value parsed up to that point. ParseInt truncates numbers to integer values.

<P>If the radix is not specified or is specified as 0, JavaScript assumes the following:
<LI>If the input <I>string</I> begins with "0x", the radix is 16 (hexadecimal).
<LI>If the input <I>string</I> begins with "0", the radix is 8 (octal).
<LI>If the input <I>string</I> begins with any other value, the radix is 10 (decimal).

<P>If the first character cannot be converted to a number, parseFloat returns one of the following values:
<LI>0 on Windows platforms.
<LI>"NaN" on any other platform, indicating that the value is not a number.

<P>For arithmetic purposes, the "NaN" value is not a number in any radix. You can call the isNaN function to determine if the result of parseInt is "NaN". If "NaN" is passed on to arithmetic operations, the operation results will also be "NaN".

<H3>Examples</H3>
<P>The following examples all return 15:
<PRE>
parseInt("F", 16)
parseInt("17", 8)
parseInt("15", 10)
parseInt(15.99, 10)
parseInt("FXX123", 16)
parseInt("1111", 2)
parseInt("15*3", 10)
</PRE>

<P>The following examples all return "NaN" or 0:
<PRE>
parseInt("Hello", 8)
parseInt("0x7", 10)
parseInt("FFF", 10)
</PRE>

<P>Even though the radix is specified differently, the following examples all return 17 because the input <I>string</I> begins with "0x".
<PRE>
parseInt("0x11", 16)
parseInt("0x11", 0)
parseInt("0x11")
</PRE>

<H3>See also</H3>
<LI><A HREF=#isNaN_method>isNaN</A>, <A HREF=#parseFloat_method>parseFloat</A> functions

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="pow_method"><H2>pow method</H2></A>
<P>
Returns <I>base</I> to the <I>exponent</I> power, that is, <I>base</I><sup><I>exponent</I></sup>.

<H3>Syntax</H3>
<PRE>pow(<I>base, exponent</I>)</PRE>
<I>base</I> is any numeric expression or a property of an existing object.
<BR><I>exponent</I> is any numeric expression or a property of an existing object.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays the value 49
document.write("7 to the power of 2 is " + Math.pow(7,2))

//Displays the value 1024
document.write("&ltP&gt2 to the power of 10 is " + Math.pow(2,10))
</PRE>

<H3>See also</H3>
<LI><A HREF=#exp_method>exp</A>, <A HREF=#log_method>log</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="prompt_method"><H2>prompt method</H2></A>
<P>
Displays a Prompt dialog box with a message and an input field.

<H3>Syntax</H3>
<PRE>prompt(<I>message</I>, [<i>inputDefault</i>])</PRE>
<I>message</I> is any string or a property of an existing object; the string is displayed as the message.
<BR><I>inputDefault</I> is a string, integer, or property of an existing object that represents the default value of the input field.


<H3>Description</H3>
<P>Use the prompt method to display a dialog box that receives user input. If you do not specify an initial value for <I>inputDefault</I>, the dialog box displays the value &ltundefined&gt.

<P>Although prompt is a method of the window object, you do not need to specify a <I>windowReference</I> when you call it. For example, <TT><I>windowReference</I>.prompt()</TT> is unnecessary.

<H3>Method of</H3>
<P><A HREF=objects.htm#window_object>window</A>

<H3>Examples</H3>
<PRE>
prompt("Enter the number of cookies you want to order:", 12)
</PRE>

<H3>See also</H3>
<LI><A HREF=#alert_method>alert</A>, <A HREF=#confirm_method>confirm</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="random_method"><H2>random method</H2></A>
<P>
Returns a pseudo-random number between zero and one. This method is available on Unix platforms only.

<H3>Syntax</H3>
<P>Math.random()

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays a random number between 0 and 1
document.write("The random number is " + Math.random())
</PRE>

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="round_method"><H2>round method</H2></A>
<P>
Returns the value of a number rounded to the nearest integer.

<H3>Syntax</H3>
<PRE>round(<I>number</I>)</PRE>
<I>number</I> is any numeric expression or a property of an existing object.

<H3>Description</H3>
<P>If the fractional portion of <I>number</I> is .5 or greater, the argument is rounded to the next highest integer. If the fractional portion of <I>number</I> is less than .5, the argument is rounded to the next lowest integer.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays the value 20
document.write("The rounded value is " + Math.round(20.49))

//Displays the value 21
document.write("&ltP&gtThe rounded value is " + Math.round(20.5))

//Displays the value -20
document.write("&ltP&gtThe rounded value is " + Math.round(-20.5))

//Displays the value -21
document.write("&ltP&gtThe rounded value is " + Math.round(-20.51))
</PRE>

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="select_method"><H2>select method</H2></A>
<P>
Selects the input area of the specified password, text, or textarea object.

<H3>Syntax</H3>
<PRE>
1. <I>passwordName</I>.select()
2. <I>textName</I>.select()
3. <I>textareaName</I>.select()
</PRE>
<P><I>passwordName</I> is either the value of the NAME attribute of a password object or an element in the <I>elements</I> array.
<BR><I>textName</I> is either the value of the NAME attribute of a text object or an element in the <I>elements</I> array.
<BR><I>textareaName</I> is either the value of the NAME attribute of a textarea object or an element in the <I>elements</I> array.

<H3>Description</H3>
<P>Use the select method to highlight the input area of a form element. You can use the select method with the focus method to highlight a field and position the cursor for a user response.

<H3>Method of</H3>
<P><A HREF=objects.htm#password_object>password</A>, <A HREF=objects.htm#text_object>text</A>, <A HREF=objects.htm#textarea_object>textarea</A>

<H3>Examples</H3>
<P>In the following example, the <I>checkPassword</I> function confirms that a user has entered a valid password. If the password is not valid, the select method highlights the password field and the focus method returns focus to it so the user can re-enter the password.
<PRE>
function checkPassword(userPass) {
   if (badPassword) {
      alert("Please enter your password again.")
      userPass.focus()
      userPass.select()
   }
}</PRE>
This example assumes that the password is defined as:
<PRE>&ltINPUT TYPE="password" NAME="userPass"&gt</PRE>

<H3>See also</H3>
<LI><A HREF=#blur_method>blur</A>, <A HREF=#focus_method>focus</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="setDate_method"><H2>setDate method</H2></A>
<P>
Sets the day of the month for a specified date.


<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.setDate(<I>dayValue</I>)</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.
<BR><I>dayValue</I> is an integer from 1 to 31 or a property of an existing object, representing the day of the month.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<P>
The second statement below changes the day for <I>theBigDay</I> to the 24th of July from its original value.
<PRE>
theBigDay = new Date("July 27, 1962 23:30:00")
theBigDay.setDate(24)
</PRE>


<H3>See also</H3>
<LI><A HREF=#getDate_method>getDate</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="setHours_method"><H2>setHours method</H2></A>
<P>
Sets the hours for a specified date.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.setHours(<I>hoursValue</I>)</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.
<BR><I>hoursValue</I> is an integer between 0 and 23 or a property of an existing object, representing the hour.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<PRE>
theBigDay.setHours(7)
</PRE>

<H3>See also</H3>
<LI><A HREF=#getHours_method>getHours</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="setMinutes_method"><H2>setMinutes method</H2></A>
<P>
Sets the minutes for a specified date.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.setMinutes(<I>minutesValue</I>)</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.
<BR><I>minutesValue</I> is an integer between 0 and 59 or a property of an existing object, representing the minutes.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<PRE>
theBigDay.setMinutes(45)
</PRE>

<H3>See also</H3>
<LI><A HREF=#getMinutes_method>getMinutes</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="setMonth_method"><H2>setMonth method</H2></A>
<P>
Sets the month for a specified date.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.setMonth(<I>monthValue</I>)</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.
<BR><I>monthValue</I> is an integer between 0 and 11 (representing the months January through Decemeber), or a property of an existing object.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<PRE>
theBigDay.setMonth(6)
</PRE>

<H3>See also</H3>
<LI><A HREF=#getMonth_method>getMonth</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="setSeconds_method"><H2>setSeconds method</H2></A>
<P>
Sets the seconds for a specified date.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.setSeconds(<I>secondsValue</I>)</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.
<BR><I>secondsValue</I> is an integer between 0 and 59 or a property of an existing object.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<PRE>
theBigDay.setSeconds(30)
</PRE>

<H3>See also</H3>
<LI><A HREF=#getSeconds_method>getSeconds</A> method
<!---------------------------------------------------------------------------->
<HR>
<A NAME="setTime_method"><H2>setTime method</H2></A>
<P>
Sets the value of a date object.

<H3>Syntax</H3>
<P><PRE><I>dateObjectName</I>.setTime(<I>timevalue</I>) </PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.
<BR><I>timevalue</I> is an integer or a property of an existing object, representing the number of milliseconds since the epoch (1 January 1970 00:00:00).

<H3>Description</H3>
<P>
Use the setTime method to help assign a date and time to another date object.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<PRE>
theBigDay = new Date("July 1, 1999")
sameAsBigDay = new Date()
sameAsBigDay.setTime(theBigDay.getTime())
</PRE>

<H3>See also</H3>
<LI><A HREF=#getTime_method>getTime</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="setTimeout_method"><H2>setTimeout method</H2></A>
<P>Evaluates an expression after a specified number of milliseconds have elapsed.

<H3>Syntax</H3>
<PRE><I>timeoutID</I>=setTimeout(<I>expression</I>, <I>msec</I>)</PRE>
<P><I>timeoutID</I> is an identifier that is used only to cancel the evaluation with the clearTimeout method.
<BR><I>expression</I> is a string expression or a property of an existing object.
<BR><I>msec</I> is a numeric value, numeric string, or a property of an existing object in millisecond units.

<H3>Description</H3>
<P>The setTimeout method evaluates an expression after a specified amount of time. It does not evaluate the expression repeatedly. For example, if a setTimeout method specifies 5 seconds, the expression is evaluated after 5 seconds, not every 5 seconds.


<H3>Method of</H3>
<P><A HREF=objects.htm#frame_object>frame</A>, <A HREF=objects.htm#window_object>window</A>

<H3>Examples</H3>
<P><B>Example 1.</B> The following example displays an alert message 5 seconds (5,000 milliseconds) after the user clicks a button. If the user clicks the second button before the alert message is displayed, the timeout is cancelled and the alert does not display.

<XMP>
<SCRIPT LANGUAGE="JavaScript">
function displayAlert() {
   alert("5 seconds have elapsed since the button was clicked.")
}
</SCRIPT>
<BODY>
<FORM>
Click the button on the left for a reminder in 5 seconds; 
click the button on the right to cancel the reminder before 
it is displayed.
<P>
<INPUT TYPE="button" VALUE="5-second reminder"
   NAME="remind_button"
   onClick="timerID=setTimeout('displayAlert()',5000)">
<INPUT TYPE="button" VALUE="Clear the 5-second reminder"
   NAME="remind_disable_button"
   onClick="clearTimeout(timerID)">
</FORM>
</BODY>
</XMP>

<P><B>Example 2.</B> The following example displays the current time in a text object. The showtime() function, which is called recursively, uses the setTimeout method update the time every second.
<XMP>
<HEAD>
<SCRIPT LANGUAGE="JavaScript">
<!--
var timerID = null
var timerRunning = false
function stopclock(){
    if(timerRunning)
        clearTimeout(timerID)
    timerRunning = false
}
function startclock(){
     // Make sure the clock is stopped
    stopclock()
    showtime()
}
function showtime(){
    var now = new Date()
    var hours = now.getHours()
    var minutes = now.getMinutes()
    var seconds = now.getSeconds()
    var timeValue = "" + ((hours > 12) ? hours - 12 : hours)
    timeValue  += ((minutes < 10) ? ":0" : ":") + minutes
    timeValue  += ((seconds < 10) ? ":0" : ":") + seconds
    timeValue  += (hours >= 12) ? " P.M." : " A.M."
    document.clock.face.value = timeValue 
    timerID = setTimeout("showtime()",1000)
    timerRunning = true
}
//-->
</SCRIPT>
</HEAD>

<BODY onLoad="startclock()">
<FORM NAME="clock" onSubmit="0">
    <INPUT TYPE="text" NAME="face" SIZE=12 VALUE ="">
</FORM>
</BODY>
</XMP>


<H3>See also</H3>
<LI><A HREF=#clearTimeout_method>clearTimeout</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="setYear_method"><H2>setYear method</H2></A>
<P>
Sets the year for a specified date.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.setYear(<I>yearValue</I>)</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.
<BR><I>yearValue</I> is an integer greater than 1900 or a property of an existing object.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<PRE>
theBigDay.setYear(96)
</PRE>

<H3>See also</H3>
<LI><A HREF=#getYear_method>getYear</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="sin_method"><H2>sin method</H2></A>
<P>
Returns the sine of a number.

<H3>Syntax</H3>
<PRE>Math.sin(<I>number</I>)</PRE>
<P><I>number</I> is a numeric expression or a property of an existing object, representing the size of an angle in radians.

<H3>Description</H3>
<P>The sin method returns a numeric value between -1 and 1, which represents the sine of the angle.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays the value 1
document.write("The sine of pi/2 radians is " +
   Math.sin(Math.PI/2))

//Displays the value 1.224606353822377e-016
document.write("&ltP&gtThe sine of pi radians is " +
   Math.sin(Math.PI))

//Displays the value 0
document.write("&ltP&gtThe sine of 0 radians is " +
   Math.sin(0))
</PRE>

<H3>See also</H3>
<LI><A HREF=#acos_method>acos</A>, <A HREF=#asin_method>asin</A>, <A HREF=#atan_method>atan</A>, <A HREF=#cos_method>cos</A>, <A HREF=#tan_method>tan</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="small_method"><H2>small method</H2></A>
<P>
Causes a string to be displayed in a small font as if it were in a &ltSMALL&gt tag.

<H3>Syntax</H3>
<PRE><I>stringName</I>.small()</PRE>
<P><I>stringName</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>Use the small method with the write or writeln methods to format and display a string in a document.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses string methods to change the size of a string:
<PRE>
var worldString="Hello, world"

document.write(worldString.small())
document.write("&ltP&gt" + worldString.big())
document.write("&ltP&gt" + worldString.fontsize(7))
</PRE>

<P>The previous example produces the same output as the following HTML:
<PRE>
<TT>&ltSMALL&gtHello, world&lt/SMALL&gt</TT>
<TT>&ltP&gt&ltBIG&gtHello, world&lt/BIG&gt</TT>
<TT>&ltP&gt&ltFONTSIZE=7&gtHello, world&lt/FONTSIZE&gt</TT>
</PRE>

<H3>See also</H3>
<LI><A HREF=#big_method>big</A>, <A HREF=#fontsize_method>fontsize</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="sqrt_method"><H2>sqrt method</H2></A>
<P>
Returns the square root of a number.

<H3>Syntax</H3>
<PRE>Math.sqrt(<I>number</I>)</PRE>
<I>number</I> is any non-negative numeric expression or a property of an existing object.

<H3>Description</H3>
<P>If the value of <I>number</I> is outside the suggested range, the return value is always 0.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays the value 3
document.write("The square root of 9 is " + Math.sqrt(9))

//Displays the value 1.414213562373095
document.write("&ltP&gtThe square root of 2 is " + Math.sqrt(2))

//Displays the value 0 because the argument is out of range
document.write("&ltP&gtThe square root of -1 is " + Math.sqrt(-1))
</PRE>

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="strike_method"><H2>strike method</H2></A>
<P>
Causes a string to be displayed as struck out text as if it were in a &ltSTRIKE&gt tag.

<H3>Syntax</H3>
<PRE><I>stringName</I>.strike()</PRE>
<P><I>stringName</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>Use the strike method with the write or writeln methods to format and display a string in a document.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses string methods to change the formatting of a string:
<PRE>
var worldString="Hello, world"

document.write(worldString.blink())
document.write("&ltP&gt" + worldString.bold())
document.write("&ltP&gt" + worldString.italics())
document.write("&ltP&gt" + worldString.strike())
</PRE>

<P>The previous example produces the same output as the following HTML:
<PRE>
<TT>&ltBLINK&gtHello, world&lt/BLINK&gt</TT>
<TT>&ltP&gt&ltB&gtHello, world&lt/B&gt</TT>
<TT>&ltP&gt&ltI&gtHello, world&lt/I&gt</TT>
<TT>&ltP&gt&ltSTRIKE&gtHello, world&lt/STRIKE&gt</TT>
</PRE>

<H3>See also</H3>
<LI><A HREF=#blink_method>blink</A>, <A HREF=#bold_method>bold</A>, <A HREF=#italics_method>italics</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="sub_method"><H2>sub method</H2></A>
<P>
Causes a string to be displayed as a subscript as if it were in a &ltSUB&gt tag.

<H3>Syntax</H3>
<PRE><I>stringName</I>.sub()</PRE>
<P><I>stringName</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>Use the sub method with the write or writeln methods to format and display a string in a document.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses the sub and sup methods to format a string:
<PRE>
var superText="superscript"
var subText="subscript"

document.write("This is what a " + superText.sup() + " looks like.")
document.write("&ltP&gtThis is what a " + subText.sub() + " looks like.")
</PRE>
<P>The previous example produces the same output as the following HTML:
<PRE>
This is what a &ltSUP&gtsuperscript&lt/SUP&gt looks like.
&ltP&gtThis is what a &ltSUB&gtsubscript&lt/SUB&gt looks like.
</PRE>


<H3>See also</H3>
<P><A HREF=#sup_method>sup</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="submit_method"><H2>submit method</H2></A>
<P>
Submits a form.

<H3>Syntax</H3>
<PRE><I>formName</I>.submit()</PRE>
<P><I>formName</I> is the name of any form or an element in the forms array.

<H3>Description</H3>
<P>The submit method submits the specified form. It performs the same action as a submit button.

<P>Use the submit method to send data back to an http server. The submit method returns the data using either "get" or "post", as specified in the <A HREF=props.htm#method_property>method</A> property.

<H3>Method of</H3>
<P><A HREF=objects.htm#form_object>form</A>

<H3>Examples</H3>
<P>The following example submits a form called <I>musicChoice</I>:
<PRE>
document.musicChoice.submit()
</PRE>
<P>If <I>musicChoice</I> is the first form created, you also can submit it as follows:
<PRE>
document.forms[0].submit()
</PRE>
<P>See also the example for the <A HREF=objects.htm#form_object>form</A> object.

<H3>See also</H3>
<LI><A HREF=objects.htm#submit_object>submit</A> object
<LI><A HREF=events.htm#onSubmit_event>onSubmit</A> event handler
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="substring_method"><H2>substring method</H2></A>
<P>
Returns a subset of a string object.

<H3>Syntax</H3>
<PRE><I>stringName</I>.substring(<I>indexA</I>, <I>indexB</I>)</PRE>
<P><I>stringName</I> is any string or a property of an existing object.
<BR><I>indexA</I> is any integer from 0 to <I>stringName</I>.length - 1, or a property of an existing object.
<BR><I>indexB</I> is any integer from 0 to <I>stringName</I>.length - 1, or a property of an existing object.

<H3>Description</H3>
<P>Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character is <I>stringName</I>.length - 1.

<P>If <I>indexA</I> is less than <I>indexB</I>, the substring method returns the subset starting with the character at <I>indexA</I> and ending with the character before <I>indexB</I>. If <I>indexA</I> is greater than <I>indexB</I>, the substring method returns the subset starting with the character at <I>indexB</I> and ending with the character before <I>indexA</I>. If <I>indexA</I> is equal to <I>indexB</I>, the substring method returns the empty string.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses substring to display characters from the string "Netscape".
<PRE>
var anyString="Netscape"

//Displays "Net"
document.write(anyString.substring(0,3))
document.write(anyString.substring(3,0))
//Displays "cap"
document.write(anyString.substring(4,7))
document.write(anyString.substring(7,4))
</PRE>

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="sup_method"><H2>sup method</H2></A>
<P>
Causes a string to be displayed as a superscript as if it were in a &ltSUP&gt tag.

<H3>Syntax</H3>
<PRE><I>stringName</I>.sup()</PRE>
<P><I>stringName</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>Use the sup method with the write or writeln methods to format and display a string in a document.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
The following example uses the sub and sup methods to format a string:
<PRE>
var superText="superscript"
var subText="subscript"

document.write("This is what a " + superText.sup() + " looks like.")
document.write("&ltP&gtThis is what a " + subText.sub() + " looks like.")
</PRE>
<P>The previous example produces the same output as the following HTML:
<PRE>
This is what a &ltSUP&gtsuperscript&lt/SUP&gt looks like.
&ltP&gtThis is what a &ltSUB&gtsubscript&lt/SUB&gt looks like.
</PRE>

<H3>See also</H3>
<LI><A HREF=#sub_method>sub</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="tan_method"><H2>tan method</H2></A>
<P>
Returns the tangent of a number.

<H3>Syntax</H3>
<PRE>Math.tan(<I>number</I>)</PRE>
<P><I>number</I> is a numeric expression representing the size of an angle in radians, or a property of an existing object.

<H3>Description</H3>
<P>The tan method returns a numeric value which represents the tangent of the angle.

<H3>Method of</H3>
<P><A HREF=objects.htm#Math_object>Math</A>

<H3>Examples</H3>
<PRE>
//Displays the value 0.9999999999999999
document.write("The tangent of pi/4 radians is " +
   Math.tan(Math.PI/4))

//Displays the value 0
document.write("&ltP&gtThe tangent of 0 radians is " +
   Math.tan(0))
</PRE>

<H3>See also</H3>
<LI><A HREF=#acos_method>acos</A>, <A HREF=#asin_method>asin</A>, <A HREF=#atan_method>atan</A>, <A HREF=#cos_method>cos</A>, <A HREF=#sin_method>sin</A> methods

<!----------------------------------------------------------------->
<HR>
<A NAME="toGMTString_method"><H2>toGMTString method</H2></A>
<P>
Converts a date to a string, using the Internet GMT conventions.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.toGMTString()</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.

<H3>Description</H3>
<P>The exact format of the value returned by toGMTString varies according to the platform.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
In the following example, <I>today</I> is a date object:
<PRE>
today.toGMTString()
</PRE>
<P>
In this example, the toGMTString method converts the date to GMT (UTC) using the operating system's time zone offset and returns a string value that is similar to the following form. The exact format depends on the platform.
<P>
Mon, 18 Dec 1995 17:28:35 GMT

<H3>See also</H3>
<LI><A HREF=#toLocaleString_method>toLocaleString</A> method

<!----------------------------------------------------------------->
<HR>
<A NAME="toLocaleString_method"><H2>toLocaleString method</H2></A>
<P>
Converts a date to a string, using the current locale's conventions.

<H3>Syntax</H3>
<PRE><I>dateObjectName</I>.toLocaleString()</PRE>
<P><I>dateObjectName</I> is either the name of a date object or a property of an existing object.

<H3>Description</H3>
If you are trying to pass a date using toLocaleString, be aware that different locales assemble the string in different ways. Using methods such as getHours, getMinutes, and getSeconds will give more portable results.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
In the following example, <I>today</I> is a date object:
<PRE>
today.toLocaleString()
</PRE>
<P>
In this example, toLocaleString returns a string value that is similar to the following form. The exact format depends on the platform.
<P>
12/18/95 17:28:35

<H3>See also</H3>
<LI><A HREF=#toGMTString_method>toGMTString</A> method

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="toLowerCase_method"><H2>toLowerCase method</H2></A>
<P>
Returns the calling string value converted to lower case.

<H3>Syntax</H3>
<PRE><I>stringName</I>.toLowerCase()</PRE>
<P><I>stringName</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>The toLowerCase method returns the value of <I>stringName</I> converted to lower case. toLowerCase does not affect the value of <I>stringName</I> itself.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
<P>The following examples both yield "alphabet".
<PRE>
var upperText="ALPHABET"
document.write(upperText.toLowerCase())

"ALPHABET".toLowerCase()
</PRE>

<H3>See also</H3>
<LI><A HREF=#toUpperCase_method>toUpperCase</A> method
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="toUpperCase_method"><H2>toUpperCase method</H2></A>
<P>
Returns the calling string value converted to upper case.

<H3>Syntax</H3>
<PRE><I>stringName</I>.toUpperCase()</PRE>
<P><I>stringName</I> is any string or a property of an existing object.

<H3>Description</H3>
<P>The toUpperCase method returns the value of <I>stringName</I> converted to upper case. toUpperCase does not affect the value of <I>stringName</I> itself.

<H3>Method of</H3>
<P><A HREF=objects.htm#string_object>string</A>

<H3>Examples</H3>
<P>The following examples both yield "ALPHABET".
<PRE>
var lowerText="alphabet"
document.write(lowerText.toUpperCase())

"alphabet".toUpperCase()
</PRE>

<H3>See also</H3>
<LI><A HREF=#toLowerCase_method>toLowerCase</A> method

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="unescape_method"><H2>unescape function</H2></A>
<P>Returns the ASCII string for the specified value.

<H3>Syntax</H3>
<PRE>unescape("<i>string</i>")</PRE>
<P><I>string</I> is a string or a property of an existing object, containing characters in either of the following forms:
<LI>"%<I>integer</I>", where <I>integer</I> is a number between 0 and 255 (decimal)
<LI>"<I>hex</I>", where <I>hex</I> is a number between 0x0 and 0xFF (hexadecimal)

<H3>Description</H3>
<P>The unescape function is not a method associated with any object, but is part of the language itself.

<P>The string returned by the unescape function is a series of characters in the ISO Latin-1 character set.


<H3>Examples</H3>
<P>The following example returns "&"
<PRE>
unescape("%26")
</PRE>

<P>The following example returns "!#"
<PRE>
unescape("%21%23")
</PRE>

<H3>See also</H3>
<LI><A HREF=#escape_method>escape</A> function

<!----------------------------------------------------------------->
<HR>
<A NAME="UTC_method"><H2>UTC method</H2></A>
<P>
Returns the number of milliseconds in a date object since January 1, 1970 00:00:00, Universal Coordinated Time (GMT).

<H3>Syntax</H3>
<PRE>Date.UTC(<I>year, month, day [, hrs] [, min] [, sec]</I>)</PRE>
<P><I>year</I> is a year after 1900.
<BR><I>month</I> is a month between 0-11.
<BR><I>date</I> is a day of the month between 1-31.
<BR><I>hrs</I> is hours between 0-23.
<BR><I>min</I> is minutes between 0-59.
<BR><I>sec</I> is seconds between 0-59.

<H3>Description</H3>
<P>
UTC takes comma-delimited date parameters and returns the number of milliseconds since January 1, 1970 00:00:00, Universal Coordinated Time (GMT).

<P>
Because UTC is a static method of Date, you always use it as <TT>Date.UTC()</TT>, rather than as a method of a date object you created.

<H3>Method of</H3>
<P><A HREF=objects.htm#Date_object>Date</A>

<H3>Examples</H3>
<P>
The following statement creates a date object using GMT instead of local time:

<PRE>
gmtDate = new Date(Date.UTC(96, 11, 1, 0, 0, 0))
</PRE>

<H3>See also</H3>
<LI><A HREF=#parse_method>parse</A> method

<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="write_method"><H2>write method</H2></A>
<P>
Writes one or more HTML expressions to a document in the specified window.

<H3>Syntax</H3>
<PRE>write(<I>expression1</I> [,<I>expression2</I>], ...[,<I>expressionN</I>])</PRE>
<I>expression1</I> through <I>expressionN</I> are any JavaScript expressions or the properties of existing objects.

<H3>Description</H3>
<P>The write method displays any number of expressions in a document window. You can specify any JavaScript expression with the write method, including numerics, strings, or logicals.
<P>The write method is the same as the writeln method, except the write method does not append a newline character to the end of the output.
<P>Use the write method within any &ltSCRIPT&gt tag or within an event handler. Event handlers execute after the original document closes, so the write method will implicitly open a new document of <I>mimeType</I> <TT>text/html</TT> if you do not explicitly issue a document.open() method in the event handler.

<H3>Method of</H3>
<P><A HREF=objects.htm#document_object>document</A>

<H3>Examples</H3>
In the following example, the write method takes several arguments, including strings, a numeric, and a variable:
<PRE>
var mystery = "world"
// Displays Hello world testing 123
msgWindow.document.write("Hello ", mystery, " testing ", 123)
</PRE>

In the following example, the write method takes two arguments. The first argument is an assignment expression, and the second argument is a string literal.
<PRE>
//Displays Hello world...
msgWindow.document.write(mystr = "Hello "+ "world...")
</PRE>

In the following example, the write method takes a single argument that is a conditional expression. If the value of the variable <I>age</I> is less than 18, the method displays "Minor". If the value of <I>age</I> is greater than or equal to 18, the method displays "Adult".
<PRE>
msgWindow.document.write(status = (age >= 18) ? "Adult" : "Minor")
</PRE>

<H3>See also</H3>
<LI><A HREF=#close_document_method>close</A>, <A HREF=#clear_method>clear</A>, <A HREF=#open_document_method>open</A>, <A HREF=#writeln_method>writeln</A> methods
<!------------------------------------------------------------------------------------------------>
<HR>
<A NAME="writeln_method"><H2>writeln method</H2></A>
<P>
Writes one or more HTML expressions to a document in the specified window and follows them with a newline character.

<H3>Syntax</H3>
<PRE>writeln(<I>expression1</I> [,<I>expression2</I>], ...[,<I>expressionN</I>])</PRE>
<I>expression1</I> through <I>expressionN</I> are any JavaScript expressions or the properties of existing objects.

<H3>Description</H3>
<P>The writeln method displays any number of expressions in a document window. You can specify any JavaScript expression, including numerics, strings, or logicals.
<P>The writeln method is the same as the write method, except the writeln method appends a newline character to the end of the output. HTML ignores the newline character, except within certain tags such as &ltPRE&gt.
<P>Use the writeln method within any &ltSCRIPT&gt tag or within an event handler. Event handlers execute after the original document closes, so the writeln method will implicitly open a new document of <I>mimeType</I> <TT>text/html</TT> if you do not explicitly issue a document.open() method in the event handler.

<H3>Method of</H3>
<P><A HREF=objects.htm#document_object>document</A>

<H3>Examples</H3>
<P>All the examples used for the <A HREF=#write_method>write</A> method are also valid with the writeln method.

<H3>See also</H3>
<LI><A HREF=#close_document_method>close</A>, <A HREF=#clear_method>clear</A>, <A HREF=#open_document_method>open</A>, <A HREF=#write_method>write</A> methods
<!------------------------------------------------------------------------------------------------->

<HR>
<SCRIPT>
document.write("<FONT SIZE=-2>Last modified " + document.lastModified)
</SCRIPT>
</BODY>
</HTML>

